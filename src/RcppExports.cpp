// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fitbeta_cpp
List fitbeta_cpp(Eigen::VectorXd r, Eigen::MatrixXd G, double var_epsilon, List param, List infeaturesfit, bool dichotomous, double mu, double tau, bool dichotomous_i);
RcppExport SEXP _SMARTboost_fitbeta_cpp(SEXP rSEXP, SEXP GSEXP, SEXP var_epsilonSEXP, SEXP paramSEXP, SEXP infeaturesfitSEXP, SEXP dichotomousSEXP, SEXP muSEXP, SEXP tauSEXP, SEXP dichotomous_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type r(rSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type var_epsilon(var_epsilonSEXP);
    Rcpp::traits::input_parameter< List >::type param(paramSEXP);
    Rcpp::traits::input_parameter< List >::type infeaturesfit(infeaturesfitSEXP);
    Rcpp::traits::input_parameter< bool >::type dichotomous(dichotomousSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type dichotomous_i(dichotomous_iSEXP);
    rcpp_result_gen = Rcpp::wrap(fitbeta_cpp(r, G, var_epsilon, param, infeaturesfit, dichotomous, mu, tau, dichotomous_i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SMARTboost_fitbeta_cpp", (DL_FUNC) &_SMARTboost_fitbeta_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_SMARTboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
