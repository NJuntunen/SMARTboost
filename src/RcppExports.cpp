// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// loopfeatures_cpp
Eigen::MatrixXd loopfeatures_cpp(Eigen::VectorXd r, Eigen::VectorXd h, Eigen::MatrixXd G0, Eigen::MatrixXd x, Eigen::MatrixXd mugrid, Eigen::VectorXd dichotomous, Eigen::VectorXd taugrid, SMARTParamStruct SMARTparams, const double var_epsilon);
RcppExport SEXP _SMARTboost_loopfeatures_cpp(SEXP rSEXP, SEXP hSEXP, SEXP G0SEXP, SEXP xSEXP, SEXP mugridSEXP, SEXP dichotomousSEXP, SEXP taugridSEXP, SEXP SMARTparamsSEXP, SEXP var_epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type r(rSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mugrid(mugridSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dichotomous(dichotomousSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type taugrid(taugridSEXP);
    Rcpp::traits::input_parameter< SMARTParamStruct >::type SMARTparams(SMARTparamsSEXP);
    Rcpp::traits::input_parameter< const double >::type var_epsilon(var_epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(loopfeatures_cpp(r, h, G0, x, mugrid, dichotomous, taugrid, SMARTparams, var_epsilon));
    return rcpp_result_gen;
END_RCPP
}
// nlopt_example
Rcpp::List nlopt_example();
RcppExport SEXP _SMARTboost_nlopt_example() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(nlopt_example());
    return rcpp_result_gen;
END_RCPP
}
// refineOptim_cpp
std::vector<double> refineOptim_cpp(Eigen::VectorXd r, Eigen::VectorXd h, Eigen::MatrixXd G0, Eigen::VectorXd xi, Eigen::VectorXd dichotomous, double mu0, bool dichotomous_i, double tau0, SMARTParamStruct SMARTparams, double var_epsilon);
RcppExport SEXP _SMARTboost_refineOptim_cpp(SEXP rSEXP, SEXP hSEXP, SEXP G0SEXP, SEXP xiSEXP, SEXP dichotomousSEXP, SEXP mu0SEXP, SEXP dichotomous_iSEXP, SEXP tau0SEXP, SEXP SMARTparamsSEXP, SEXP var_epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type r(rSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G0(G0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dichotomous(dichotomousSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< bool >::type dichotomous_i(dichotomous_iSEXP);
    Rcpp::traits::input_parameter< double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< SMARTParamStruct >::type SMARTparams(SMARTparamsSEXP);
    Rcpp::traits::input_parameter< double >::type var_epsilon(var_epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(refineOptim_cpp(r, h, G0, xi, dichotomous, mu0, dichotomous_i, tau0, SMARTparams, var_epsilon));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SMARTboost_loopfeatures_cpp", (DL_FUNC) &_SMARTboost_loopfeatures_cpp, 9},
    {"_SMARTboost_nlopt_example", (DL_FUNC) &_SMARTboost_nlopt_example, 0},
    {"_SMARTboost_refineOptim_cpp", (DL_FUNC) &_SMARTboost_refineOptim_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_SMARTboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
